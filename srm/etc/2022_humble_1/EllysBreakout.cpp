#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<to;x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------


int D[101][101];
class EllysBreakout {
	public:
	int getCount(vector <string> plan) {
		int H=plan.size();
		int W=plan[0].size();
		int y,x;
		FOR(y,H) FOR(x,W) D[y][x]=10101;
		
		if(H<=2||W<=2) {
			int ret=0;
			FOR(y,H) FOR(x,W) ret+=plan[y][x]=='.';
			return ret;
		}
		
		deque<pair<int,int>> Q;
		FOR(y,H) FOR(x,W) if(y==0||y==H-1||x==0||x==W-1) {
			if(plan[y][x]=='.') {
				D[y][x]=0;
				Q.push_front({y,x});
			}
			else {
				D[y][x]=1;
				Q.push_back({y,x});
			}
		}
		map<int,int> C;
		while(Q.size()) {
			int cy=Q.front().first;
			int cx=Q.front().second;
			Q.pop_front();
			int i;
			int d[4]={0,1,0,-1};
			FOR(i,4) {
				int ty=cy+d[i];
				int tx=cx+d[i^1];
				if(ty<0||ty>=H||tx<0||tx>=W) continue;
				if(D[ty][tx]>D[cy][cx]+(plan[ty][tx]=='#')) {
					D[ty][tx]=D[cy][cx]+(plan[ty][tx]=='#');
					if(plan[ty][tx]=='#') Q.push_back({ty,tx});
					else Q.push_front({ty,tx});
				}
			}
		}
		FOR(y,H) FOR(x,W) if(plan[y][x]=='.') C[D[y][x]]++;
		
		return C.rbegin()->second;
	}
	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arr0[] = {".#............",
 ".#####........",
 ".#.#..#.......",
 ".##.#.#.......",
 ".#.#..#..####.",
 ".#...##..#.##.",
 "..####...###.."}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 1; verify_case(0, Arg1, getCount(Arg0)); }
	void test_case_1() { string Arr0[] = {"..#",
 "...",
 ".#."}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 7; verify_case(1, Arg1, getCount(Arg0)); }
	void test_case_2() { string Arr0[] = {"#.#.#.#.#.#.#.#.#.",
 ".#.#.#.#.#.#.#.#.#",
 "#.#.#.#.#.#.#.#.#.",
 ".#.#.#.#.#.#.#.#.#",
 "#.#.#.#.#.#.#.#.#.",
 ".#.#.#.#.#.#.#.#.#",
 "#.#.#.#.#.#.#.#.#.",
 ".#.#.#.#.#.#.#.#.#",
 "#.#.#.#.#.#.#.#.#.",
 ".#.#.#.#.#.#.#.#.#",
 "#.#.#.#.#.#.#.#.#.",
 ".#.#.#.#.#.#.#.#.#"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 8; verify_case(2, Arg1, getCount(Arg0)); }
	void test_case_3() { string Arr0[] = {"#########",
 "#########",
 "#########",
 "#########",
 "####.####",
 "####.####",
 "####.####",
 "#########",
 "#########",
 "#########",
 "#########"}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 3; verify_case(3, Arg1, getCount(Arg0)); }
	void test_case_4() { string Arr0[] = {"#...##.......#..#..#..#.#..#..###............##...",
 "....#.....#....#...###..#....#......#.#.......#.#.",
 "......#....#..#.....#.#..#...#.#..##.......#.....#",
 "................#..#......##........#..#....##...#",
 "###..#..#.#....##...#...........#.##..###..##.....",
 ".##..#......#...........#.##...##..#.....#.....#..",
 "....#..##...#..#.#........##.#....................",
 ".#.#.#.##.....#.........#......#.......#..#.##.#..",
 "..#....#......#........#...#.#...#.#....#........#",
 "#.#....#..#.#.#.#....#.....................#.#....",
 ".#....#..#.......#.........#....#.#............##.",
 "..##......#....###..#...#.#..#.....##........#..#.",
 "........#.#..........#......#........##.#.#.#....#",
 "....#.#..####...#..#.....#.###..##....#.#.......#.",
 "....#....#...#................###.#......##.......",
 ".#.....#..#.....##....#......................##.#.",
 "#.................#.......#...#...........#....#..",
 "............#........#.....#.#.....#.#.....#..##..",
"#......#.#..#.#.##..#.........#..#.#.....#.....#..",
 "....#..###.#........#.#.....................##....",
 "......##...###..#...#.##..#..#.##....#.........##.",
 ".......#...............#....#...#......##....#..#.",
 ".#...#.##....#...#........###..##.#....#...##.....",
 "....#........#..............#..###.#.#..#.....#.##",
 ".#...#..#.....#.#...#...........#....##.....#.#...",
 "...#..#.#.#..##....#............#.....#........###",
 ".##......#.#..##.......###...##...................",
 "..........#.............#.#...#.....###...##..##..",
 ".......##...#.#...#.........#.#.....#.#..#.#...#..",
 "####.........#.#.....#....#.#......#.#.....#..#...",
 ".#.#...#..###...#.#.#.....###.#....##.....#...#..#",
 ".#..#.##.#.###....#.###..#..........#...#.........",
 "##..#.#....#..##...#.....##..#..##..............##",
 "#.##.##..........##.#....##......#...#.....##...#.",
 ".....#........#..............#.....####.######....",
 "..##............#..###.##...#.#...#.....#.#...#..#",
 "...##..#.#...#......#.#..........#..#..##..#.#..#.",
 "..##.####......#....#....#.....#......#....##.....",
 "#.......####.#......##.#.....#..#........#...##.#.",
 "..#.....#..###....#......#..#........#....####....",
 "......#.....#..................#.........#.##...#.",
 "...#....#....##......#.#.....#.....#....#......#..",
 "....#.##...#.#....#..#.#...#.......##.......#.#...",
 "...#..#.#.##.#.....###....#.###.....##.#......#...",
 ".#.#......#.....#.....#...........##...#.....#.##.",
 "..........#.....#...#.##....#..........#.....###..",
 "........##..#.....#...#....##..#......##.......#..",
 ".....#....##....#.....#....#.#.#.........#........",
 "..#...##......#.#............#....#.##...#....#...",
 "..##...#.#...#......#....##.#.#..#......#..######."}; vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arg1 = 13; verify_case(4, Arg1, getCount(Arg0)); }

// END CUT HERE


};
// BEGIN CUT HERE 

int main(int argc,char** argv) {
  EllysBreakout ___test;
  ___test.run_test((argc==1)?-1:atoi(argv[1]));
}

