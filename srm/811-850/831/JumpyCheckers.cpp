#include <bits/stdc++.h>
using namespace std;
typedef signed long long ll;

#undef _P
#define _P(...) (void)printf(__VA_ARGS__)
#define FOR(x,to) for(x=0;x<to;x++)
#define FORR(x,arr) for(auto& x:arr)
#define FORR2(x,y,arr) for(auto& [x,y]:arr)
#define ITR(x,c) for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)
#define ALL(a) (a.begin()),(a.end())
#define ZERO(a) memset(a,0,sizeof(a))
#define MINUS(a) memset(a,0xff,sizeof(a))
template<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}
template<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}
//-------------------------------------------------------

ll from[1<<10][1<<10];
ll to[1<<10][1<<10];

const ll mo=1000000007;
class JumpyCheckers {
	public:
	int count(int R, int C) {
		int r,c;
		//for(r=1;r<=20;r++) for(c=1;c<=20;c++) cout<<r<<" "<<c<<" "<<count_slow(r,c)<<endl;
		int ret[21][21]={};
		ret[3][1]=0;
		ret[3][2]=0;
		ret[3][3]=12;
		ret[3][4]=24;
		ret[3][5]=156;
		ret[3][6]=312;
		ret[3][7]=1548;
		ret[3][8]=3096;
		ret[3][9]=13884;
		ret[3][10]=27768;
		ret[3][11]=118572;
		ret[3][12]=237144;
		ret[3][13]=986076;
		ret[3][14]=1972152;
		ret[3][15]=8076108;
		ret[3][16]=16152216;
		ret[3][17]=65546364;
		ret[3][18]=131092728;
		ret[3][19]=529058412;
		ret[3][20]=58116817;
		ret[4][1]=0;
		ret[4][2]=0;
		ret[4][3]=24;
		ret[4][4]=156;
		ret[4][5]=774;
		ret[4][6]=3471;
		ret[4][7]=14799;
		ret[4][8]=61515;
		ret[4][9]=251934;
		ret[4][10]=1022646;
		ret[4][11]=4128417;
		ret[4][12]=16609794;
		ret[4][13]=66683406;
		ret[4][14]=267354252;
		ret[4][15]=70994122;
		ret[4][16]=287984446;
		ret[4][17]=162123272;
		ret[4][18]=674377940;
		ret[4][19]=763294147;
		ret[4][20]=220352968;
		ret[5][1]=0;
		ret[5][2]=0;
		ret[5][3]=156;
		ret[5][4]=774;
		ret[5][5]=7276;
		ret[5][6]=30478;
		ret[5][7]=253542;
		ret[5][8]=1026648;
		ret[5][9]=8305912;
		ret[5][10]=33343162;
		ret[5][11]=267638082;
		ret[5][12]=71702713;
		ret[5][13]=582237568;
		ret[5][14]=340051068;
		ret[5][15]=803590820;
		ret[5][16]=321530459;
		ret[5][17]=375412355;
		ret[5][18]=536387632;
		ret[5][19]=46279510;
		ret[5][20]=176216426;
		ret[6][1]=0;
		ret[6][2]=0;
		ret[6][3]=312;
		ret[6][4]=3471;
		ret[6][5]=30478;
		ret[6][6]=253850;
		ret[6][7]=2066110;
		ret[6][8]=16661521;
		ret[6][9]=133782916;
		ret[6][10]=72110365;
		ret[6][11]=583800110;
		ret[6][12]=696421693;
		ret[6][13]=669119734;
		ret[6][14]=720552071;
		ret[6][15]=146292512;
		ret[6][16]=366631769;
		ret[6][17]=470702491;
		ret[6][18]=231005755;
		ret[6][19]=84408429;
		ret[6][20]=367968948;
		ret[7][1]=0;
		ret[7][2]=0;
		ret[7][3]=1548;
		ret[7][4]=14799;
		ret[7][5]=253542;
		ret[7][6]=2066110;
		ret[7][7]=33378015;
		ret[7][8]=267779483;
		ret[7][9]=291223721;
		ret[7][10]=345712062;
		ret[7][11]=675768523;
		ret[7][12]=746058613;
		ret[7][13]=29742982;
		ret[7][14]=513597643;
		ret[7][15]=478355072;
		ret[7][16]=658256454;
		ret[7][17]=60385162;
		ret[7][18]=625440179;
		ret[7][19]=387083288;
		ret[7][20]=885795867;
		ret[8][1]=0;
		ret[8][2]=0;
		ret[8][3]=3096;
		ret[8][4]=61515;
		ret[8][5]=1026648;
		ret[8][6]=16661521;
		ret[8][7]=267779483;
		ret[8][8]=291313622;
		ret[8][9]=698763488;
		ret[8][10]=394922479;
		ret[8][11]=525319003;
		ret[8][12]=242691151;
		ret[8][13]=484267475;
		ret[8][14]=181759167;
		ret[8][15]=547351389;
		ret[8][16]=904119083;
		ret[8][17]=915174719;
		ret[8][18]=989929404;
		ret[8][19]=769746087;
		ret[8][20]=788294776;
		ret[9][1]=0;
		ret[9][2]=0;
		ret[9][3]=13884;
		ret[9][4]=251934;
		ret[9][5]=8305912;
		ret[9][6]=133782916;
		ret[9][7]=291223721;
		ret[9][8]=698763488;
		ret[9][9]=844786712;
		ret[9][10]=373234714;
		ret[9][11]=313799040;
		ret[9][12]=200940098;
		ret[9][13]=441609809;
		ret[9][14]=967809581;
		ret[9][15]=120595977;
		ret[9][16]=130011343;
		ret[9][17]=194821102;
		ret[9][18]=352299144;
		ret[9][19]=589806006;
		ret[9][20]=785358769;
		ret[10][1]=0;
		ret[10][2]=0;
		ret[10][3]=27768;
		ret[10][4]=1022646;
		ret[10][5]=33343162;
		ret[10][6]=72110365;
		ret[10][7]=345712062;
		ret[10][8]=394922479;
		ret[10][9]=373234714;
		ret[10][10]=454242045;
		ret[10][11]=782983089;
		ret[10][12]=313252580;
		ret[10][13]=960428158;
		ret[10][14]=897855431;
		ret[10][15]=600960642;
		ret[10][16]=958764573;
		ret[10][17]=347517011;
		ret[10][18]=148855291;
		ret[10][19]=492377399;
		ret[10][20]=480067192;
		ret[11][1]=0;
		ret[11][2]=0;
		ret[11][3]=118572;
		ret[11][4]=4128417;
		ret[11][5]=267638082;
		ret[11][6]=583800110;
		ret[11][7]=675768523;
		ret[11][8]=525319003;
		ret[11][9]=313799040;
		ret[11][10]=782983089;
		ret[11][11]=602105762;
		ret[11][12]=310194944;
		ret[11][13]=192368133;
		ret[11][14]=476204592;
		ret[11][15]=287712232;
		ret[11][16]=886435268;
		ret[11][17]=80363622;
		ret[11][18]=775546188;
		ret[11][19]=128285119;
		ret[11][20]=376254472;
		ret[12][1]=0;
		ret[12][2]=0;
		ret[12][3]=237144;
		ret[12][4]=16609794;
		ret[12][5]=71702713;
		ret[12][6]=696421693;
		ret[12][7]=746058613;
		ret[12][8]=242691151;
		ret[12][9]=200940098;
		ret[12][10]=313252580;
		ret[12][11]=310194944;
		ret[12][12]=843241390;
		ret[12][13]=497137266;
		ret[12][14]=437793095;
		ret[12][15]=636109745;
		ret[12][16]=129742106;
		ret[12][17]=611759902;
		ret[12][18]=16506377;
		ret[12][19]=761740012;
		ret[12][20]=869117720;
		ret[13][1]=0;
		ret[13][2]=0;
		ret[13][3]=986076;
		ret[13][4]=66683406;
		ret[13][5]=582237568;
		ret[13][6]=669119734;
		ret[13][7]=29742982;
		ret[13][8]=484267475;
		ret[13][9]=441609809;
		ret[13][10]=960428158;
		ret[13][11]=192368133;
		ret[13][12]=497137266;
		ret[13][13]=996179677;
		ret[13][14]=235091704;
		ret[13][15]=277742062;
		ret[13][16]=367822428;
		ret[13][17]=155740774;
		ret[13][18]=590132289;
		ret[13][19]=348022705;
		ret[13][20]=415482862;
		ret[14][1]=0;
		ret[14][2]=0;
		ret[14][3]=1972152;
		ret[14][4]=267354252;
		ret[14][5]=340051068;
		ret[14][6]=720552071;
		ret[14][7]=513597643;
		ret[14][8]=181759167;
		ret[14][9]=967809581;
		ret[14][10]=897855431;
		ret[14][11]=476204592;
		ret[14][12]=437793095;
		ret[14][13]=235091704;
		ret[14][14]=508514699;
		ret[14][15]=782777698;
		ret[14][16]=714773661;
		ret[14][17]=904171281;
		ret[14][18]=263070137;
		ret[14][19]=523417053;
		ret[14][20]=517343248;
		ret[15][1]=0;
		ret[15][2]=0;
		ret[15][3]=8076108;
		ret[15][4]=70994122;
		ret[15][5]=803590820;
		ret[15][6]=146292512;
		ret[15][7]=478355072;
		ret[15][8]=547351389;
		ret[15][9]=120595977;
		ret[15][10]=600960642;
		ret[15][11]=287712232;
		ret[15][12]=636109745;
		ret[15][13]=277742062;
		ret[15][14]=782777698;
		ret[15][15]=48016267;
		ret[15][16]=337953230;
		ret[15][17]=390344433;
		ret[15][18]=420212417;
		ret[15][19]=410567307;
		ret[15][20]=283909430;
		ret[16][1]=0;
		ret[16][2]=0;
		ret[16][3]=16152216;
		ret[16][4]=287984446;
		ret[16][5]=321530459;
		ret[16][6]=366631769;
		ret[16][7]=658256454;
		ret[16][8]=904119083;
		ret[16][9]=130011343;
		ret[16][10]=958764573;
		ret[16][11]=886435268;
		ret[16][12]=129742106;
		ret[16][13]=367822428;
		ret[16][14]=714773661;
		ret[16][15]=337953230;
		ret[16][16]=22513555;
		ret[16][17]=57226507;
		ret[16][18]=314344041;
		ret[16][19]=345377938;
		ret[16][20]=971788059;
		ret[17][1]=0;
		ret[17][2]=0;
		ret[17][3]=65546364;
		ret[17][4]=162123272;
		ret[17][5]=375412355;
		ret[17][6]=470702491;
		ret[17][7]=60385162;
		ret[17][8]=915174719;
		ret[17][9]=194821102;
		ret[17][10]=347517011;
		ret[17][11]=80363622;
		ret[17][12]=611759902;
		ret[17][13]=155740774;
		ret[17][14]=904171281;
		ret[17][15]=390344433;
		ret[17][16]=57226507;
		ret[17][17]=559408666;
		ret[17][18]=894349043;
		ret[17][19]=629166238;
		ret[17][20]=525314478;
		ret[18][1]=0;
		ret[18][2]=0;
		ret[18][3]=131092728;
		ret[18][4]=674377940;
		ret[18][5]=536387632;
		ret[18][6]=231005755;
		ret[18][7]=625440179;
		ret[18][8]=989929404;
		ret[18][9]=352299144;
		ret[18][10]=148855291;
		ret[18][11]=775546188;
		ret[18][12]=16506377;
		ret[18][13]=590132289;
		ret[18][14]=263070137;
		ret[18][15]=420212417;
		ret[18][16]=314344041;
		ret[18][17]=894349043;
		ret[18][18]=692435197;
		ret[18][19]=285898773;
		ret[18][20]=451922307;
		ret[19][1]=0;
		ret[19][2]=0;
		ret[19][3]=529058412;
		ret[19][4]=763294147;
		ret[19][5]=46279510;
		ret[19][6]=84408429;
		ret[19][7]=387083288;
		ret[19][8]=769746087;
		ret[19][9]=589806006;
		ret[19][10]=492377399;
		ret[19][11]=128285119;
		ret[19][12]=761740012;
		ret[19][13]=348022705;
		ret[19][14]=523417053;
		ret[19][15]=410567307;
		ret[19][16]=345377938;
		ret[19][17]=629166238;
		ret[19][18]=285898773;
		ret[19][19]=278529275;
		ret[19][20]=562079871;
		ret[20][1]=0;
		ret[20][2]=0;
		ret[20][3]=58116817;
		ret[20][4]=220352968;
		ret[20][5]=176216426;
		ret[20][6]=367968948;
		ret[20][7]=885795867;
		ret[20][8]=788294776;
		ret[20][9]=785358769;
		ret[20][10]=480067192;
		ret[20][11]=376254472;
		ret[20][12]=869117720;
		ret[20][13]=415482862;
		ret[20][14]=517343248;
		ret[20][15]=283909430;
		ret[20][16]=971788059;
		ret[20][17]=525314478;
		ret[20][18]=451922307;
		ret[20][19]=562079871;
		ret[20][20]=421573493;
		for(r=1;r<=20;r++) for(c=1;c<=20;c++) assert(ret[r][c]==ret[c][r]);
		return ret[R][C];
		
	}
	int count_slow(int R, int C) {
		int W[2]={(C+1)/2,C/2};
		ZERO(from);
		from[0][0]=1;
		int y,x;
		int sum=0;
		int mask1,mask2,mask3;
		int i;
		FOR(y,R) {
			sum+=W[y%2];
			ZERO(to);
			
			if(y%2==0) {
				int cnt1=0,cnt2=0;
				FOR(mask1,1<<W[0]) FOR(mask2,1<<W[1]) {
					int n0=0;
					int n1=0;
					FOR(x,W[0]) {
						if(mask1&(1<<x)) {
							if(y>=2) {
								if(mask2&(1<<x)) n1|=1<<(x+1);
								if(x&&(mask2&(1<<(x-1)))) n1|=1<<(x-1);
							}
						}
						else {
							if(mask2&(1<<x)) n0|=1<<(x+1);
							if(x&&(mask2&(1<<(x-1)))) n0|=1<<(x-1);
						}
					}
					n0&=(1<<W[0])-1;
					n1&=(1<<W[0])-1;
					if(n0&n1) continue;
					int nm=n0^((1<<W[0])-1);
					cnt1++;
					for(int mask3=nm;mask3>=0;mask3--) {
						mask3&=nm;
						if(n1&~mask3) continue;
						cnt2++;
						(to[mask1][mask2]+=from[mask3][mask2]);
					}
				}
			}
			else {
				FOR(mask1,1<<W[1]) FOR(mask2,1<<W[0]) {
					int n0=0;
					int n1=0;
					FOR(x,W[1]) {
						if(mask1&(1<<x)) {
							if(y>=2) {
								if(mask2&(1<<(x+1))) n1|=1<<(x+1);
								if(x&&(mask2&(1<<x))) n1|=1<<(x-1);
							}
						}
						else {
							if(mask2&(1<<(x+1))) n0|=1<<(x+1);
							if(x&&(mask2&(1<<x))) n0|=1<<(x-1);
						}
					}
					n0&=(1<<W[1])-1;
					n1&=(1<<W[1])-1;
					if(n0&n1) continue;
					int nm=n0^((1<<W[1])-1);
					for(int mask3=nm;mask3>=0;mask3--) {
						mask3&=nm;
						if(n1&~mask3) continue;
						(to[mask2][mask1]+=from[mask2][mask3]);
					}
				}
			}
			
			FOR(mask1,1<<10) FOR(mask2,1<<10) from[mask1][mask2]=to[mask1][mask2]%mo;
			
			
		}
		
		ll ret=1;
		FOR(i,sum) ret=ret*2%mo;
		FOR(mask1,1<<((C+1)/2)) FOR(mask2,1<<((C+1)/2)) ret-=from[mask1][mask2];
		ret=(ret%mo+mo)%mo;
		return ret;
		
	}
	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arg0 = 3; int Arg1 = 3; int Arg2 = 12; verify_case(0, Arg2, count(Arg0, Arg1)); }
	void test_case_1() { int Arg0 = 2; int Arg1 = 13; int Arg2 = 0; verify_case(1, Arg2, count(Arg0, Arg1)); }
	void test_case_2() { int Arg0 = 4; int Arg1 = 5; int Arg2 = 774; verify_case(2, Arg2, count(Arg0, Arg1)); }

// END CUT HERE


};
// BEGIN CUT HERE 

int main(int argc,char** argv) {
  JumpyCheckers ___test;
  ___test.run_test((argc==1)?-1:atoi(argv[1]));
}

